import React, { useEffect, useState } from 'react'
import { 
  Grid, CircularProgress, Snackbar
} from '@material-ui/core'
import { Alert } from '@material-ui/lab'
import { makeStyles } from '@material-ui/styles'
import { callGetApiWithAuth } from 'utils/api'
import ProductCreditCard from './subscription/ProductCreditCard'

export default function SubscriptionPage(props) {
  const classes = useStyles()
  const [productCredits, setProductCredits] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [successMessage, setSuccessMessage] = useState(undefined)
  const [errorMessage, setErrorMessage] = useState(undefined)

  useEffect(() => {
    loadProductCredits()
  }, [])

  const loadProductCredits = () => {
    setIsLoading(true)
    callGetApiWithAuth('subscriptions/product_credits', onGetTableData, onFailTableData)
  }

  const onGetTableData = (data) => {
    setProductCredits(data.data)
    setIsLoading(false)
  }

  const onFailTableData = () => {
    setIsLoading(false)
  }

  const afterSuccessUpdate = (message) => {
    loadProductCredits()
    setSuccessMessage(message)
  }

  return (
    <div className={classes.container}>
      <Grid container spacing={2} justify={'center'}>
        {productCredits.map((product, index) => 
        <Grid item xs={12} md={6} lg={4} xl={3}>
          <ProductCreditCard 
            data={product}
            index={index}
            afterSuccessUpdate={afterSuccessUpdate}
          />
        </Grid>
        )}
      </Grid>
      {isLoading && 
        <div className={classes.loadingRoot}>
          <CircularProgress size={48} />
        </div>
      }
      <Snackbar
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        open={successMessage}
        autoHideDuration={2000}
        onClose={(e, r) => {
          if (r == 'timeout') setSuccessMessage(undefined)
        }}
      >
        <Alert
          severity='success'
          variant='filled'
          onClose={() => setSuccessMessage(undefined)}
        >
          {successMessage}
        </Alert>
      </Snackbar>
      <Snackbar
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        open={errorMessage}
        autoHideDuration={2000}
        onClose={(e, r) => {
          if (r == 'timeout') setErrorMessage(undefined)
        }}
      >
        <Alert
          severity='error'
          variant='filled'
          onClose={() => setErrorMessage(undefined)}
        >
          {errorMessage}
        </Alert>
      </Snackbar>
    </div>
  )
}

const useStyles = makeStyles((theme) => ({
  container: {
    position: 'relative',
    minHeight: 400,    
  },
  loadingRoot: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'absolute',
    left: 0,
    top: 0,
    width: '100%',
    height: '100%',
    opacity: 0.8,
    backgroundColor: 'rgba(128, 128, 128, 0.3)'
  }
}))
